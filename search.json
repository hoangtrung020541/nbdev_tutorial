[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev Tutorial",
    "section": "",
    "text": "Để biết thêm chi tiết về cách sử dụng hãy truy cập nbdev official tutorial hoặc YouTube video nbdev tutorial – zero to published project in 90 minutes"
  },
  {
    "objectID": "index.html#why-nbdev",
    "href": "index.html#why-nbdev",
    "title": "nbdev Tutorial",
    "section": "Why nbdev?",
    "text": "Why nbdev?\nLà một AI engineer, bạn chủ yếu làm việc với các file .ipynb . Tuy nhiên, trong quá trình triển khai production, các file .py là bắt buộc để các model AI có thể hoạt động với Web backend. Tuy nhiên, hầu hết những người mới bắt đầu đều thiếu software skill và khó khăn trong việc code các file Python. Đó là lý do tại sao nbdev ra đời và đến giải cứu bạn.\nNbdev là một battery-ready notebook development platform, được xây dựng trên Quarto platform. Nó cho phép:\n- Đồng bộ giữa file .ipynb và file .py\n- Tạo nhanh document sử dụng markdown (*) trong khi develop\n- Publish package của bạn trên PyPI hoặc Conda\n- Continuous Integration với git và chạy trên git page\n- Test, code, document ở một nơi\n(*) Markdown thường được sử dụng trong github repo với tên readme.md, để tìm hiểu thêm về Markdown hãy truy cập Markdown Guide."
  },
  {
    "objectID": "how_to_use_nbdev.html",
    "href": "how_to_use_nbdev.html",
    "title": "How To Use nbdev",
    "section": "",
    "text": "1. Installation\n\nPython\nTrình quản lý Python package: Khuyến khích sử dụng conda hoặc pip\nJupyter Notebook: pip install notebook hoặc conda install notebook\nnbdev: pip install nbdev hoặc conda install -c fastai nbdev\nQuarto: nbdev_install_quarto\n\n\n\n2. Tạo github repository trống và clone về local\n\nBạn có thể tạo nhanh một github repo thông qua link này: github.com/new.\nNhớ thêm description cho repo, bởi vì nbdev sẻ sử dụng nó. Không tạo tạo các file README.md, .gitignore, hoặc license.\nClone code về local và di chuyển đến repo đó bằng command cd name_repo trên terminal.\n\n\n\n3. Khởi tạo nbdev trên repository\n\nĐể khởi tạo nbdev trên repository, bạn hãy sử dụng command nbdev_new trên terminal\nSau khi khởi tạo nbdev, một số file và folder được tạo ra:\n.github Chứa workflow cho CI.\n_proc\nnbs Là viết tắt của “notebook source”, đây là nơi làm việc của các file notebook .ipynb\ntest_nbdev Sau khi xử lý các tệp notebook, các tệp .py sẽ được export vô lib này (tên folder này dựa trên tên repository)\n.gitignore Chỉ định file/folder không mong muốn khi push lên github\nLICENSE\nMANIFEST.in\nREADME.md File này được đồng bộ từ nbs/index.ipynb, nếu muốn edit file ‘README.md’ hãy vô file ‘index.ipynb’ edit\nsetting.ini Chứa các thông số cấu hình cho project như tên tác giả, tên dự án, version …\nsetting.py\n\n\n\n\n4. Push repository đã được khởi tạo nbdev lên GitHub\n\nCác command sau để push lên github:\ngit add .\ngit commit -m 'chore: initial commit'\ngit push\n\nSau khi push reposirory nbdev của bạn lên GitHub, điều hướng đến Actions, nếu bạn sẽ thấy CI bị Fail. Điều này là do GitHub mặc định giới hạn PAT permission, hãy nhấp vào settings trong repository Settings > Actions > General > Workflow permissions > Read and write permission > Save. Bây giờ CI của bạn sẽ chạy lại và hoạt động ngay.\n\n\n\n5. Kích hoạt GitHub Pages \n\nBạn cần kích hoạt GitHub Pages cho repository của mình bằng cách nhấp vào settings trong repository Setting > Pages > Branch chọn branch bạn muốn và Save. \nViệc kích hoạt GitHub Pages này sẽ tạo ra một pages docs trông beautiful như này nbdev page example. \n\n\n\n6. Các bước cơ bản để build một nbdev repository\n\nInstall hooks sử dụng command nbdev_install_hooks.\nHooks đảm bảo rằng các kiểm tra và các processes cần thiết được chạy mỗi khi có thay đổi được thực hiện trên kho repository, như chuyển đổi các file notebooks thành file Python và kiểm tra syntax errors, giúp giữ code và repository được tổ chức và nhất quán.\nEdit .ipynb\nTruy cập vào folder /nbs để tạo và edit các file notebook ở đây, chi tiết các viết nbdev notebook sẽ được nêu trong phần Directives.\nBuild library sử dụng command nbdev_export.\nSau khi viết xong file notebook, bạn hãy sử dụng command này giúp convert từ file Jupyter Notebook .ipynb thành file Python .py và sử dụng làm library trong project, giúp code có thể reusable, maintainable và dễ dàng tích hợp vào các project khác. Ngoài ra nbdev còn convert file .ipynb hiển thị trên GitHub Page (khi push).\nNote: Bạn cũng có thể sử dụng import nbdev; nbdev.nbdev_export() tại cuối mỗi file notebook để export thay vì sử dụng command.\n\n\nVí dụ trong hình dưới, đây là file 00_card.ipynb trong folder /nbs \n\n\nVà đây là kết quả khi sử dụng command nbdev_export, nbdev sẽ convert file /nbs/00_card.ipynb thành file /nbdev_cards/card.py (cụ thể tại những cell có #| export trên notebook sẽ được convert qua file .py) \n\n\nNgoài ra file 00_card.ipynb cũng sẽ được update lên GitHub Page khi push repository lên github thông qua CI của nbdev. Trong đó các số thứ tự trước tên file ipynb sẽ quyết định thứ tự của chúng trên page, file index.ipynb sẽ nằm đầu tiên. \n\n\nInstall package sử dụng command pip install -e '.[dev]'.\nCommand này được sử dụng trong quá trình develop một Python package để cho phép package được cài đặt và sử dụng trong environment trực tiếp trong khi source code đang được chỉnh sửa, thường được sử dụng sau khi bạn export một file notebook.\nNote: Nếu bạn thực hiện các thay đổi đối với code mà không ảnh hưởng đến quá trình install (chẳng hạn như thêm các feature mới hoặc fix bug), bạn có thể không cần phải chạy lệnh này.\nPreview docs sử dụng command nbdev_preview.\nSau khi hoàn chỉnh một file notebook, khi run command này terminal sẽ hiển thị một browser link ở định dạng HTML chạy trên local (ví dụ như http://localhost:3744/). Click vào link để xem trước các bản notebook như thế nào trước khi được đưa lên GitHub Page.\nPrepare change sử dụng command nbdev_prepare.\nSử dụng trước khi commit hoặc push lên github, để đảm bảo các module của bạn được export đúng cách và các bài test được vượt qua. Trong đó command nbdev_prepaređóng gói các lệnh sau:\nnbdev_export: Build file.py module từ Jupyter notebooks\nnbdev_test: Tests các file để kiểm tra bug\nnbdev_clean: Loại bỏ các output thừa trong notebook để tạo ra một phiên bản notebook “sạch” hơn để đăng trên Github\nnbdev_readme: Updates file README.md từ file index.ipynb.\nPush lên Github\nLỗi có thể xảy ra vì bạn quên chạy command nbdev_prepare. Vì vậy, hãy nhớ chạy command này trước khi push lên GitHub, các command để push github:\ngit add .\ngit commit -m <message>\ngit push"
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "Test",
    "section": "",
    "text": "#| echo: true\nprint(\"Hello\")\n\nprint(\"Hello\")\n\nHello\n\n\n\n\n\n#| echo: false\nprint(\"Hello\")\n\n\nHello\n\n\n\n\n\n#| output: asis\nprint(\"Hello\")\nprint(\"Hello\")\nHello\n\n\n\n#| output: true\nprint(\"Hello\")\n\nprint(\"Hello\")\n\nHello\n\n\n\n\n\n#| output: false\nprint(\"Hello\")\n\nprint(\"Hello\")\n\n\n\n\nprint(\"Hide line\") #| hide_line\nprint(\"Hello\")\n\nprint(\"Hello\")\n\nHide line\nHello\n\n\n\n\n\n#|filter_stream FutureWarning MultiIndex\nprint('\\n'.join(['A line', 'Foobar baz FutureWarning blah', 'zig zagMultiIndex zoom', 'Another line.']))\n\nprint('\\n'.join(['A line', 'Foobar baz FutureWarning blah', 'zig zagMultiIndex zoom', 'Another line.']))\n\nA line\nAnother line.\n\n\n\n\n\n#| code-fold: true\nprint('Hello')\nprint('nbdev')\n\n\nCode\nprint('Hello')\nprint('nbdev')\n\n\nHello\nnbdev\n\n\n\n\n\n#| code-fold: show\nprint('Hello')\nprint('nbdev')\n\n\nCode\nprint('Hello')\nprint('nbdev')\n\n\n\n\n\n#| exporti\ndef test():\n     print(\"Test nbdev 2\")\n\n\n\n#| eval: false\nraise Exception(\"I'm not raised because I'm not run\")\n\nraise Exception(\"I'm not raised because I'm not run\")\n\nException: I'm not raised because I'm not run"
  },
  {
    "objectID": "01_Directives.html",
    "href": "01_Directives.html",
    "title": "nbdev_tutorial",
    "section": "",
    "text": "Magic comments\n\n\nTrong nbdev, các directive (hay còn gọi là “magic comments”) là các câu lệnh đặc biệt được sử dụng để thực hiện các chức năng nhất định trong quá trình phát triển và tạo tài liệu cho package. Các directives bắt đầu bằng #| và được đặt ở đầu mỗi cell code trong Jupyter Notebook. Các directive được sử dụng như tín hiệu cho Quarto trong quá trình tạo docs. các tín hiệu này cho biết Quarto nên xử lý các ô như thế nào và định dạng tài liệu như thế nào.\n=> Tìm hiểu thêm về Quarto tại quarto.org\n\n\nCác directive sau đây để thực hiện các chức năng cho page, không áp dụng đối với file .py\n- #| hide Để ẩn cell code và output trên page.\n- #| echo: <true|false> Để ẩn cell code trên page và chỉ hiện output (false) , để hiện cả cell code và output trên page (true).\n- #| output: <true|false|asis> Để set hiển thị output, ẩn (false), hiện (true), hoặc hiển thị kiểu raw markdown (asis) trên page.\n- #| hide_line Để ẩn 1 dòng code trong cell notebook.\n- #| filter_stream <keyword> Lọc các dòng chứa từ khóa cụ thể trong kết quả output của cell.\n- #| code-fold: <show|true> Để thu gọn cell code.\n\n\n\n\n#| default_exp <name> Để tạo ra một Python package <name>.py từ tệp notebook hiện tại khi export.\n\n#| export Chỉ định một cell trong notebook sẽ được export đến file Python .py, ngoài ra directive này cũng tạo documentation chi tiết tại cell đó trên page.\n\n#| exports tương tự như #| export nhưng hiển thị thêm docs thông qua showdoc.show_doc.\n\n#| exportiĐể đánh dấu một hàm hay một đoạn code trong tệp notebook để được xuất ra như một phần của một module con riêng biệt, ví dụ sau: \n\n\n\n\n\n#| exec_doc: Tạo docs trên cell code.\n#| eval: <true|false> Khi để false, cell code sẽ được ignore trong quá trình test thông qua command nbdev_test.\n\n\n\n\nBạn có thể chạy command nbdev_help trên terminal để xem danh sách đầy đủ các command có sẵn:"
  }
]